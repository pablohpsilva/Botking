generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["auth", "core", "item", "robot", "asset"]
}

/* =========================
   Enums (beta)
   ========================= */
enum owner_type {
  PLAYER

  @@schema("core")
  @@map("owner_type")
}

enum item_class {
  SOUL_CHIP
  SKELETON
  PART
  EXPANSION_CHIP
  MISC

  @@schema("item")
  @@map("item_class")
}

enum robot_part_slot {
  TORSO
  ARM_R
  ARM_L
  LEGS

  @@schema("robot")
  @@map("robot_part_slot")
}

enum instance_state {
  NEW
  USED
  EQUIPPED

  @@schema("item")
  @@map("instance_state")
}

enum asset_kind {
  ICON
  CARD
  SPRITE
  THREE_D

  @@schema("asset")
  @@map("kind")
}

/* =========================
   auth (minimal identity)
   ========================= */
model user {
  id String        @id @default(uuid())
  email        String? // removed @db.Citext
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  links        identity_link[]

  @@schema("auth")
  @@map("user")
}

model identity_link {
  id               String   @id @default(uuid())
  userId     String
  globalPlayerId String @unique @default(uuid())
  linkedAt        DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user user @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, globalPlayerId])
  @@schema("auth")
  @@map("identity_link")
}

/* =========================
   core (shards & players)
   ========================= */
model shard {
  shardId Int @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  players player_account[]

  @@schema("core")
  @@map("shard")
}

model player_account {
  id               String   @id @default(uuid())
  shardId         Int
  globalPlayerId String @unique @default(uuid())
  createdAt       DateTime @default(now())
  updatedAt DateTime @updatedAt

  shard shard @relation(fields: [shardId], references: [shardId], onDelete: Restrict)

  // relations to beta systems
  stacks    inventory_stack[]
  instances instance[]
  robots    robot[]

  @@unique([globalPlayerId, shardId], name: "ux_player_global_per_shard")

  @@schema("core")
  @@map("player_account")
}

/* =========================
   item (templates & items)
   ========================= */
model template {
  id String     @id @default(uuid())
  itemClass       item_class
  name        String
  slug        String     @unique
  // optional metadata for prototype balancing
  meta        Json?
  createdAt       DateTime @default(now())
  updatedAt DateTime @updatedAt

  instances instance[]
  stacks    inventory_stack[]
  assets    item_template_asset[]

  @@schema("item")
  @@map("template")
}

model instance {
  id    String         @id @default(uuid())
  shardId        Int
  playerId       String
  templateId     String
  state           instance_state // 'NEW' | 'USED' | 'EQUIPPED' (enforce via SQL if you like)
  boundToPlayer String?
  createdAt       DateTime @default(now())
  updatedAt DateTime @updatedAt

  account  player_account @relation(fields: [shardId, playerId], references: [shardId, id], onDelete: Cascade)
  template template       @relation(fields: [templateId], references: [id], onDelete: Restrict)

  // robot slot relations
  soul_chip_slot soul_chip_slot?
  skeleton_slot  skeleton_slot?
  part_slot      part_slots[]    // <— change to list
  expansion_slot expansion_slot[] // <— change to list

  // Indexes for inventory/equip UX
  @@index([shardId, playerId], map: "ix_iteminst_player")
  @@index([templateId], map: "ix_iteminst_tpl")
  // Add partial in SQL: WHERE state IN ('USED','EQUIPPED')

  @@schema("item")
  @@map("instance")
}

model inventory_stack {
  id    String @id @default(uuid())
  shardId    Int
  playerId   String
  templateId String
  quantity         BigInt
  createdAt       DateTime @default(now())
  updatedAt DateTime @updatedAt

  account  player_account @relation(fields: [shardId, playerId], references: [shardId, id], onDelete: Cascade)
  template template       @relation(fields: [templateId], references: [id], onDelete: Restrict)

  @@unique([shardId, playerId, templateId])
  @@index([shardId, playerId], map: "ix_stack_player")

  @@schema("item")
  @@map("inventory_stack")
}

/* =========================
   robot (free build)
   ========================= */
model robot {
  id   String   @id @default(uuid())
  shardId   Int
  playerId  String
  nickname   String?
  createdAt       DateTime @default(now())
  updatedAt DateTime @updatedAt

  account player_account @relation(fields: [shardId, playerId], references: [shardId, id], onDelete: Cascade)

  // loadout
  soul_chip  soul_chip_slot?
  skeleton   skeleton_slot?
  parts      part_slots[]
  expansions expansion_slot[]

  @@index([shardId, playerId], map: "ix_robot_player")

  @@schema("robot")
  @@map("robot")
}

model soul_chip_slot {
  robotId     String @id
  itemInstId String @unique
  createdAt       DateTime @default(now())
  updatedAt DateTime @updatedAt

  robot    robot    @relation(fields: [robotId], references: [id], onDelete: Cascade)
  instance instance @relation(fields: [itemInstId], references: [id], onDelete: Restrict)

  @@schema("robot")
  @@map("soul_chip_slot")
}

model skeleton_slot {
  robotId     String @id
  itemInstId String @unique
  createdAt       DateTime @default(now())
  updatedAt DateTime @updatedAt

  robot    robot    @relation(fields: [robotId], references: [id], onDelete: Cascade)
  instance instance @relation(fields: [itemInstId], references: [id], onDelete: Restrict)

  @@schema("robot")
  @@map("skeleton_slot")
}

model part_slots {
  robotId     String
  slotType    robot_part_slot
  itemInstId String          @unique


  robot    robot    @relation(fields: [robotId], references: [id], onDelete: Cascade)
  instance instance @relation(fields: [itemInstId], references: [id], onDelete: Restrict)

  @@id([robotId, slotType])
  @@index([itemInstId], map: "ix_partslot_item")

  @@schema("robot")
  @@map("part_slots")
}

model expansion_slot {
  robotId     String
  slotIx      Int
  itemInstId String @unique
  createdAt       DateTime @default(now())
  updatedAt DateTime @updatedAt

  robot    robot    @relation(fields: [robotId], references: [id], onDelete: Cascade)
  instance instance @relation(fields: [itemInstId], references: [id], onDelete: Restrict)

  @@id([robotId, slotIx])
  @@index([itemInstId], map: "ix_expslot_item")

  @@schema("robot")
  @@map("expansion_slot")
}

model asset {
  id      String     @id @default(uuid())
  packId  String
  kind    asset_kind
  url     String // CDN URL
  width   Int?
  height  Int?
  variant String? // e.g. "default", "night", "gold"
  meta    Json?
  createdAt       DateTime @default(now())
  updatedAt DateTime @updatedAt

  pack asset_pack @relation(fields: [packId], references: [id], onDelete: Cascade)

  // link to item templates
  templateLinks item_template_asset[]

  @@schema("asset")
  @@map("asset")
}

model asset_pack {
  id        String   @id @default(uuid())
  name      String
  version   String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  assets asset[]

  @@schema("asset")
  @@map("pack")
}

model item_template_asset {
  id          String  @id @default(uuid())
  itemTplId String
  assetId    String
  primary     Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  template template @relation(fields: [itemTplId], references: [id], onDelete: Cascade)
  asset    asset    @relation(fields: [assetId], references: [id], onDelete: Cascade)

  @@unique([itemTplId, assetId])
  @@index([itemTplId, primary])
  @@schema("asset")
  @@map("template_asset")
}